{"version":3,"sources":["components/movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","props","title","this","poster_path","overview","vote_average","className","src","alt","id","Component","App","useState","movies","setMovies","searchTerm","setSearchTerm","useEffect","getMovies","API","fetch","then","res","json","data","console","log","results","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","length","map","movie","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA6BeA,E,kDAzBX,WAAYC,GAAO,uCACTA,G,0CAEV,WACI,IAAIC,EAAMC,KAAKF,MAAMC,MACjBE,EAAYD,KAAKF,MAAMG,YACvBC,EAAWF,KAAKF,MAAMI,SACtBC,EAAaH,KAAKF,MAAMK,aAE5B,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAdN,mCAcmBJ,EAAaK,IAAKP,IACpC,sBAAKK,UAAU,aAAf,UACI,6BAAKL,IACL,sBAAMQ,GAAG,YAAT,SAAsBJ,OAE1B,sBAAKC,UAAU,aAAf,UACI,2CACA,4BAAIF,c,GAnBJM,a,MCgELC,MAxDf,WAAgB,IAAD,EACcC,mBAAS,IADvB,mBACNC,EADM,KACCC,EADD,OAEuBF,mBAAS,CAAC,KAFjC,mBAENG,EAFM,KAEMC,EAFN,KAGbC,qBAAU,WACRC,EARc,kHASd,IAEF,IAAMA,EAAU,SAACC,GACfC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAOA,EAAIC,UAChBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZV,EAAUU,EAAKG,aAgBrB,OACE,qCACI,sBAAKrB,UAAU,SAAf,UACE,oBAAIG,GAAG,MAAP,oBACF,sBAAMmB,SAhBW,SAACC,GACtBA,EAAEC,iBACCf,IACDG,EAtBW,4FAsBUH,GAC3BC,EAAc,MAYN,SACwB,uBACAV,UAAU,SAASyB,KAAK,SACxBC,YAAY,mBACZC,MAAOlB,EACPmB,SAdN,SAACL,GACrBb,EAAca,EAAEM,OAAOF,eAqBrB,qBAAK3B,UAAU,kBAAf,SAEGO,EAAOuB,OAAQ,GAAKvB,EAAOwB,KAAI,SAACC,GAAD,OAC9B,cAAC,EAAD,eAA0BA,GAAdA,EAAM7B,aC/Cf8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e5f073b3.chunk.js","sourcesContent":["import React,{Component} from 'react';\nconst IMG_API =\"https://image.tmdb.org/t/p/w1280\";\n\nclass Movie extends Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        var title=this.props.title;\n        var poster_path=this.props.poster_path;\n        var overview = this.props.overview;\n        var vote_average=this.props.vote_average;\n\n        return(\n            <div className=\"movie\">\n                <img src={IMG_API+poster_path} alt={title}/>\n                <div className=\"movie-info\">\n                    <h4>{title}</h4>\n                    <span id=\"vote_span\">{vote_average}</span>\n                </div>\n                <div className=\"movie-over\">\n                    <h2>Overview:</h2>\n                    <p>{overview}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Movie;","import React ,{useEffect, useState} from \"react\";\nimport Movie from './components/movie';\n\n\nimport './App.css';\n\n\nconst FEATURE_API=\"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=813e4d6e9a0fa4f3d4ee41fc05061863\";\nconst SEARCH_API=\"https://api.themoviedb.org/3/search/movie?api_key=813e4d6e9a0fa4f3d4ee41fc05061863&query=\";\n\n\nfunction App() {\n  const [movies,setMovies] = useState([]);\n  const [searchTerm, setSearchTerm] = useState([\"\"]);\n  useEffect(()=>{\n    getMovies(FEATURE_API);\n  },[]);\n\n  const getMovies=(API)=>{\n    fetch(API)\n      .then((res)=>res.json())\n      .then((data)=>{\n        console.log(data)\n        setMovies(data.results);\n      });\n  };\n\n  const handleOnSubmit = (e) =>{\n    e.preventDefault();\n    if(searchTerm){\n      getMovies(SEARCH_API+searchTerm);\nsetSearchTerm('');\n}\n}\n  const onChangeHandler = (e) =>{\n      setSearchTerm(e.target.value);\n  }\n\n\n  return (\n    <>\n        <div className=\"header\">\n          <h1 id=\"tit\">MOVAPP</h1>\n        <form onSubmit={handleOnSubmit}>\n                                <input \n                                className=\"search\" type=\"search\" \n                                placeholder=\"search movies...\"\n                                value={searchTerm}\n                                onChange={onChangeHandler}\n                                />\n        </form>         \n                          \n                            \n                            \n                      \n        </div>\n        <div className=\"movie-container\">\n          \n          {movies.length >0 && movies.map((movie)=>\n            <Movie key={movie.id} {...movie} />\n          )}\n          \n        </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}